// Generated by Wrangler by running `wrangler types types.d.ts`

export interface ProcessingStats {
  totalProcessed: number;
  failedRequests: number;
  averageProcessingTime: number;
  queueDepths: Record<string, number>;
  lastUpdated: number;
}

export interface Env {
  AI: {
    run<T>(model: string, inputs: unknown[]): Promise<T[]>;
  };
  STORAGE: R2Bucket;
  INPUT_QUEUE: Queue;
  PROCESSING_QUEUE: Queue;
  RESULTS_QUEUE: Queue;
  STATS: DurableObjectNamespace;
}

export interface R2Event {
  type: 'upload' | 'delete';
  key: string;
  size?: number;
  etag?: string;
  httpMetadata?: R2HTTPMetadata;
  customMetadata?: Record<string, string>;
}

type R2HTTPMetadata = Record<string, string>;

interface InputQueueMessage {
  file: string;
  timestamp: number;
}

interface ProcessingQueueMessage {
  data: any;
  sourceFile: string;
  timestamp: number;
  retryCount?: number;  // Track number of retry attempts
}

interface ResultsQueueMessage {
  result: any;
  sourceFile: string;
  timestamp: number;
  batchId?: string;
}

interface MessageBatch<T> {
  queue: string;
  messages: QueueMessage<T>[];
}

interface QueueMessage<T> {
  id: string;
  timestamp: number;
  body: T;
  ack(): void;
  retry(): void;
}

interface ExportedHandler<Env, Q = unknown, R = unknown> {
  fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response>;
  scheduled?(event: ScheduledEvent, env: Env, ctx: ExecutionContext): Promise<void>;
  queue?(batch: MessageBatch<Q>, env: Env, ctx: ExecutionContext): Promise<void>;
  r2Event?(event: R2Event, env: Env, ctx: ExecutionContext): Promise<void>;
}

interface Queue<T = unknown> {
  send(message: T): Promise<void>;
  length(): Promise<number>;
}

interface DurableObjectId {
  toString(): string;
  equals(other: DurableObjectId): boolean;
  name?: string;
}

interface DurableObject {
  fetch(request: string | Request, init?: RequestInit): Promise<Response>;
}

interface DurableObjectNamespace {
  idFromName(name: string): DurableObjectId;
  get(id: DurableObjectId): DurableObject;
}

export interface ExecutionContext {
  waitUntil(promise: Promise<any>): void;
  passThroughOnException?(): void;
}
